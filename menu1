#!/bin/bash
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# System Request : Debian 9+/Ubuntu 18.04+/20+
# Develovers » FanVPN-Store
# Email      » HurufKapital58@gmail.com
# telegram   » https://t.me/AJW29
# whatsapp   » wa.me/+6287812264674
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# FanVPN-Store
data_ip="https://raw.githubusercontent.com/Pemulaajiw/script/main/register"
m2=$(curl -s ifconfig.me)
useexp=$(curl -sS $data_ip | grep $m2 | awk '{print $3}')
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")
if [[ $date_list < $useexp ]]; then
echo -ne
else
systemctl stop nginx
echo -e "╭═════════════════════════════════════════════════╮"
echo -e "│               \033[1;91mPERMISSION DENIED !\e[0m               │"
echo -e "│   \033[1;91mYour VPS $m2 Has been Banned\e[0m "
echo -e "│       \033[1;91mBuy access permissions for scripts\e[0m        │"
echo -e "│               \033[1;91mContact Your Admin\e[0m                │"
echo -e "╰═════════════════════════════════════════════════╯"
exit
fi
clear
colornow=$(cat /etc/rmbl/theme/color.conf)
colorfont=$(cat /etc/rmbl/warnafont/warnaf.conf)
export COLOR1="$(cat /etc/rmbl/theme/$colornow | grep -w "TEXT" | cut -d: -f2|sed 's/ //g')"
export COLBG1="$(cat /etc/rmbl/theme/$colornow | grep -w "BG" | cut -d: -f2|sed 's/ //g')"
export WH="$(cat /etc/rmbl/warnafont/$colorfont | grep -w "WARNAF" | cut -d: -f2|sed 's/ //g')"
#WH='\033[1;37m'
export y='\033[1;33m'
export BGX="\033[42m"
export BICyan="\033[0;36m"
export z="\033[95;1m"
export f="\033[1;97;41m"
export G="\033[92m"
export RED='\033[1;31m'
export BRED='\033[1;31m'
export NC='\033[0m'
export gray="\e[1;30m"
export UNGU="\033[1;35m"
export Blue="\033[1;34m"
export bblue="\033[1;34m"
export green='\033[0;32m'
export GREEN='\033[1;32m'
export grenbo="\e[92;1m"
export pr="\033[0;95m"
export YELL='\033[1;93m'
export orange='\033[33m'
export mg='\033[35m'
export white='\033[1;97m'
export bwhite='\033[1;37m'
export BOLD="\e[1m"
export CYAN='\033[0;36m'
export LIGHT='\033[0;37m'
export YELLOW='\033[0;33m'

# underline
UPU='\033[5;35m'
UCY='\033[5;36m'
UWH='\033[5;37m'
# INTALLER-UDP
UDPX="https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2"
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
IPVPS=$(curl -s ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
vnstat_profile=$(vnstat | sed -n '3p' | awk '{print $1}' | grep -o '[^:]*')
vnstat -i ${vnstat_profile} >/etc/t1
bulan=$(date +%b)
tahun=$(date +%y)
ba=$(curl -s https://pastebin.com/raw/0gWiX6hE)
today=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
todayd=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
today_v=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $9}')
today_rx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $2}')
today_rxv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $3}')
today_tx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $5}')
today_txv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $6}')
if [ "$(grep -wc ${bulan} /etc/t1)" != '0' ]; then
bulan=$(date +%b)
month=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $9}')
month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $10}')
month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $3}')
month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $4}')
month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $6}')
month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan $ba$tahun" | awk '{print $7}')
else
bulan2=$(date +%Y-%m)
month=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $8}')
month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $9}')
month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $2}')
month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $3}')
month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $5}')
month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $6}')
fi
if [ "$(grep -wc yesterday /etc/t1)" != '0' ]; then
yesterday=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $8}')
yesterday_v=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $9}')
yesterday_rx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $2}')
yesterday_rxv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $3}')
yesterday_tx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $5}')
yesterday_txv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $6}')
else
yesterday=NULL
yesterday_v=NULL
yesterday_rx=NULL
yesterday_rxv=NULL
yesterday_tx=NULL
yesterday_txv=NULL
fi
DATEVPS=$(date +'%d-%m-%Y')
TIMEZONE=$(printf '%(%H-%M-%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
echo ""
izinsc="https://raw.githubusercontent.com/Pemulaajiw/script/main/register"
# validity
valid=$(curl ${izinsc} | grep $MYIP | awk '{print $3}')
# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
clear
# CERTIFICATE STATUS
today=$(date -d "0 days" +"%Y-%m-%d")
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
espayed=$(( (d1 - d2) / 86400 ))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status Expired Or Active
Info="(${green}Active${NC})"
Error="(${RED}Expired${NC})"
Exp1=$(curl ${izinsc} | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

# Getting CPU Information
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"
ISP=$(curl -s ipinfo.io/org | cut -d " " -f 2-10 )
CITY=$(curl -s ipinfo.io/city )
WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)

# IPVPS=$(curl -s ipinfo.io/ip )
IPVPS=$(curl -sS ipv4.icanhazip.com) 
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
stat_noobz=$( systemctl status noobzvpns | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${GREEN}ON${NC}"
else
   status_ssh="${RED}OFF${NC}"
fi

# SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${GREEN}ON${NC}"
else
    status_ws_epro="${RED}OFF${NC}"
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${GREEN}ON${NC}"
else
   status_haproxy="${RED}OFF${NC}"
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${GREEN}ON${NC}"
else
   status_xray="${RED}OFF${NC}"
fi

# STATUS SERVICE NOOBZ
if [[ $stat_noobz == "running" ]]; then
    stat_noobz="${GREEN}ON${NC}"
else
    stat_noobz="${RED}OFF${NC}"
    systemctl start noobzvpns
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${GREEN}ON${NC}"
else
   status_nginx="${RED}OFF${NC}"
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${GREEN}ON${NC}"
else
   status_dropbear="${RED}OFF${NC}"
fi

# // Log account
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#ss# " "/etc/xray/config.json")
let ssa=$ssx/2
jumlah_noobz=$(grep -c -E "^### " "/etc/xray/noob")

a="ACCOUNT PREMIUM" 
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m${NC}"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m${NC}"
                        
BICyan='\033[1;36m'       # Cyan
BIWhite='\033[1;97m'      # White
UWhite='\033[4;37m'       # White
BIYellow='\033[1;93m'     # Yellow

clear
echo -e ""
echo -e ""
echo -e "                 ${COLOR1}Premium Script : ${WH}.::::. FAN-VPN .::::.${NC}"
echo -e "              ${COLOR1} SCRIPT MULTI V2.4 STABILE ${NC}"
echo -e "${COLOR1} ┌─────────────────────────────────────────────────────┐${NC}"
echo -e "${COLOR1} │                  ${WH}${COLOR1}Informations${NC}"
echo -e "${COLOR1} │====================================================="
echo -e "${COLOR1} │  ${COLOR1}SYSTEM VPS  : ${WH}$MODEL${NC}"
echo -e "${COLOR1} │  ${COLOR1}ISP VPS     : ${WH}$ISP${NC}"
echo -e "${COLOR1} │  ${COLOR1}CITY        : ${WH}$CITY${NC}"
echo -e "${COLOR1} │  ${COLOR1}RAM SERVER  : ${WH}$uram / $tram MB ${NC}"
echo -e "${COLOR1} │  ${COLOR1}DATE VPS    : ${WH}$DATEVPS${NC}"
echo -e "${COLOR1} │  ${COLOR1}IP SERVER   : ${WH}$IPVPS${NC}"
echo -e "${COLOR1} │  ${COLOR1}DOMAIN VPS  : ${WH}$domain${NC}"
echo -e "${COLOR1} │  ${COLOR1}TIMEZONE    : ${WH}$TIMEZONE${NC}"
echo -e "${COLOR1} │  ${COLOR1}UPTIME VPS  : ${WH}$SERONLINE${NC}"
echo -e " ${COLOR1}└─────────────────────────────────────────────────────┘${NC}"
echo -e " ${COLOR1}         SSH ${NC}: ${status_ssh}   ${COLOR1}NGINX ${NC}: ${status_nginx}   ${COLOR1}HAPROXY ${NC}: ${status_haproxy}"
echo -e " ${COLOR1}       WS-ePro ${NC}: ${status_ws_epro}   ${COLOR1}XRAY ${NC}: ${status_xray}   ${COLOR1}DROPBEAR ${NC}: ${status_dropbear}"
echo -e " ${COLOR1}                                   NOONZVPNS ${NC}: ${stat_noobz}"
echo -e "${COLOR1} ┌─────────────────────────────────────────────────────┐${NC}"
echo -e "${COLOR1} │                      OTHER MENU                     │ ${NC}" 
echo -e "${COLOR1} │=====================================================│"
echo -e "${COLOR1} │${NC}${COLOR1} [•1]${NC}📨 ${WH} SSH${NC}          " "${COLOR1}[•8]${NC}📨 ${WH} MENU SETINGS${NC}"
echo -e "${COLOR1} │${NC}${COLOR1} [•2]${NC}📨 ${WH} VMESS${NC}        " "${COLOR1}[•9]${NC}📨 ${WH} MENU WARNA${NC}"           
echo -e "${COLOR1} │${NC}${COLOR1} [•3]${NC}📨 ${WH} VLESS${NC}        " "${COLOR1}[10]${NC}📨 ${WH} MENU TEMA${NC}  "                   
echo -e "${COLOR1} │${NC}${COLOR1} [•4]${NC}📨 ${WH} TROJAN-WS${NC}    " "${COLOR1}[11]${NC}📨 ${WH} MENU ENCRIPSI${NC} "                 
echo -e "${COLOR1} │${NC}${COLOR1} [•5]${NC}📨 ${WH} NOOBZVPNS${NC}    " "${COLOR1}[12]${NC}📨 ${WH} MENU WARP${NC} "
echo -e "${COLOR1} │${NC}${COLOR1} [•6]${NC}📨 ${WH} SHADOWSK${NC}     " "${COLOR1}[13]${NC}📨 ${WH} MENU BOT TELE${NC} "
echo -e "${COLOR1} │${NC}${COLOR1} [•7]${NC}📨 ${WH} Update Menu${NC}  " "${COLOR1}[14]${NC}📨 ${WH} MENU BACKUP${NC} "
echo -e "${COLOR1} │${NC}${COLOR1} [15]${NC}📨 ${WH} REGIST IP"
echo -e "${COLOR1} └──────────────────────────────────────────────────────┘${NC}" 
echo -e "${COLOR1} ┌─────────────────────────────────────────────────────┐${NC}"
echo -e "${COLOR1} │  \033[0m ${BOLD}${GREEN}XXX${BIYellow} SSH${GREEN}  XXX  ${BIYellow}VMESS  ${GREEN}XXX  ${BIYellow}VLESS  ${GREEN}XXX  ${BIYellow}TROJAN${GREEN} XXX $NC "
echo -e "${COLOR1} │  \033[0m ${Blue}     $ssh1         $vma           $vla           $tra              $NC"
echo -e "${COLOR1} │  \033[0m ${BOLD}${GREEN}XXX${BIYellow} SDWSK${GREEN}  XXX  ${BIYellow}NOOBZ  ${GREEN}XXX $NC "
echo -e "${COLOR1} │  \033[0m ${Blue}     $ssa         $jumlah_noobz              $NC"
echo -e "${COLOR1} └─────────────────────────────────────────────────────┘${NC}"
echo -e "${COLOR1} ┌─────────────────────────────────────────────────────┐${NC}"
echo -e "${COLOR1} │HARI ini${NC}: ${WH}$today_tx $today_txv$NC ${COLOR1}KEMARIN${NC}: ${WH}$yesterday_tx $yesterday_txv$NC ${COLOR1}BULAN${NC}: ${WH}$month_tx $month_txv$NC $NC"
echo -e "${COLOR1} └─────────────────────────────────────────────────────┘${NC}"
echo -e " ${COLOR1}┌─────────────────────────────────────┐${NC}"
echo -e " ${COLOR1}│  Version      ${NC} : Ver2.4 Last Update"
echo -e "${COLOR1} │  Status       ${NC} : $sts"
echo -e " ${COLOR1}│  User       ${NC}   :\033[1;36m $username \e[0m"
echo -e " ${COLOR1}│  Expiry script${NC} : ${RED}$Exp1 ${COLOR1}[${BIWhite}$espayed Days${NC} Days"
echo -e " ${COLOR1}└─────────────────────────────────────┘${NC}"
echo
read -p " Select menu : " opt
echo -e ""
case $opt in
1 | 01)
clear
m-sshws
;;
2 | 02)
clear
m-vmess
;;
3 | 03)
clear
m-vless
;;
4 | 04)
clear
m-trojan
;;
5 | 05)
clear
m-ssws
;;
6 | 06)
clear
m-noobz
;;
7 | 07)
clear
wget ${UPDATE}update.sh && chmod +x update.sh && ./update.sh
;;
8 | 08)
clear
m-system;
;;
9 | 09)
m-theme
;;
10)
clear
m-tema
;;
11)
clear
efile
;;
8 | 08)
clear
menu-backup
;;
12)
clear
echo -e " ${COLOR1}◇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◇${NC}"
echo -e " ${COLOR1} $NC${f}                WARP MANAGER                  $NC${z} $NC"
echo -e " ${COLOR1}◇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◇${NC}"
echo -e "  ${COLOR1}[1].${NC}\033[0;36m Install Warp Client${NC}"
echo -e "  ${COLOR1}[2].${NC}\033[0;36m Uninstall Warp Client${NC}"
echo -e "  ${COLOR1}[3].${NC}\033[0;36m Restart warp Client${NC}"
echo -e "  ${COLOR1}[4].${NC}\033[0;36m Aktifkan Warp Mode Proxy${NC}"
echo -e "  ${COLOR1}[5].${NC}\033[0;36m Matikankan Warp Mode Proxy${NC}"
echo -e "  ${COLOR1}[6].${NC}\033[0;36m Install Warp Wireguard${NC}"
echo -e "  ${COLOR1}[7].${NC}\033[0;36m Warp Ipv4${NC}"
echo -e "  ${COLOR1}[8].${NC}\033[0;36m Warp Ipv6${NC}"
echo -e "  ${COLOR1}[9].${NC}\033[0;36m Warp Ipv4 & Ipv6${NC}"
echo -e " ${COLOR1}[10].${NC}\033[0;36m Warp Routing IP${NC}"
echo -e " ${COLOR1}[11].${NC}\033[0;36m Restart Warp Wireguard${NC}"
echo -e " ${COLOR1}[12].${NC}\033[0;36m Matikan Warp Wireguard${NC}"
echo -e " ${COLOR1}[13].${NC}\033[0;36m Warp Status${NC}"
echo -e " ${COLOR1}[14].${NC}\033[0;36m Warp Version${NC}"
echo -e " ${COLOR1}[15].${NC}\033[0;36m Help${NC}"
echo -e " ${COLOR1}[16].${NC}\033[0;36m Warp Menu Chinese Special Feature${NC}"
echo -e "  ${COLOR1}[0].${NC}\033[0;36m  Exit ${NC}"
echo -e " ${COLOR1}◇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◇${NC}"
read -p "Select From Options [ 1 - 16 or 0 ] : " menu
echo -e ""
case $menu in
1)
    bash <(curl -fsSL git.io/warp.sh) install
    ;;
2)
    bash <(curl -fsSL git.io/warp.sh) uninstall
    ;;
3)
    bash <(curl -fsSL git.io/warp.sh) restart
    ;;
4)
    bash <(curl -fsSL git.io/warp.sh) proxy
    ;;
5)
    bash <(curl -fsSL git.io/warp.sh) unproxy
    ;;
6)
    bash <(curl -fsSL git.io/warp.sh) wg
    ;;
7)
    bash <(curl -fsSL git.io/warp.sh) wg4
    ;;
8)
    bash <(curl -fsSL git.io/warp.sh) wg6 
    ;;
9)
    bash <(curl -fsSL git.io/warp.sh) wgd
    ;;
10) 
    bash <(curl -fsSL git.io/warp.sh) wgx
   ;;
11)
    bash <(curl -fsSL git.io/warp.sh) rwg
   ;;
12)
    bash <(curl -fsSL git.io/warp.sh) dwg
   ;;
13)
    bash <(curl -fsSL git.io/warp.sh) status
   ;;
14)
    bash <(curl -fsSL git.io/warp.sh) help
   ;;
15)
    bash <(curl -fsSL git.io/warp.sh) version
   ;;
16)
    bash <(curl -fsSL git.io/warp.sh) menu
   ;;
0)
    menu
    ;;
esac
;;
13)
clear
m-bot
;;
14)
clear
menu-backup
;;
15)
clear
reseller
;;
0 | 00)
exit
;;
x)
menu
;;
*) clear ;
echo -e ""
menu
;;
esac
